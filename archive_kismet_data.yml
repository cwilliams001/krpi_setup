---
- name: Archive Kismet data and fetch it
  hosts: krpi_hosts
  become: yes
  gather_facts: yes
  tasks:
    - name: Stop Kismet
      ansible.builtin.systemd:
        name: kismet
        state: stopped

    - name: Create an archive of the Kismet data folder
      ansible.builtin.archive:
        path: "{{ kismet_data_path }}"
        dest: /tmp/kismet_data.tar.gz
        format: gz
      register: archive_result

    - name: Fetch the archive to local machine
      ansible.builtin.fetch:
        src: /tmp/kismet_data.tar.gz
        dest: /home/kserver/remote_captures/{{ inventory_hostname }}_kismet_data.tar.gz
        flat: yes
      when: archive_result.changed

    - name: Remove temporary archive from remote host
      ansible.builtin.file:
        path: /tmp/kismet_data.tar.gz
        state: absent
      when: archive_result.changed

    - name: Find Kismet data folder names
      ansible.builtin.find:
        paths: "{{ kismet_data_path }}"
        file_type: any
      register: kismet_data_files

    - name: Get the latest file
      set_fact:
        latest_file: "{{ kismet_data_files.files | sort(attribute='mtime', reverse=True) | first }}"

    - name: Delete Kismet data folder contents except the latest file
      ansible.builtin.shell:
        cmd: "find {{ kismet_data_path }} -type f -not -name '{{ latest_file.path | basename }}' -exec rm -f {} \\;"
      when: archive_result.changed

    - name: Start Kismet
      ansible.builtin.systemd:
        name: kismet
        state: started
    
    - name: Start Kismet Wifi Capture
      ansible.builtin.shell:
        cmd: "/opt/multi-source.sh"      
